  -- Creating the first CTE with main data which is going to be used for the futher analysis
WITH
  main_data AS (
  SELECT
    sales.*,
    CONCAT(sales.CustomerID, '-', Transaction_ID) AS unique_transaction_id,
    CASE
      WHEN Coupon_Status != 'Used' OR Coupon_code IS NULL THEN ROUND((((Quantity * Avg_Price)*(1+tax.GST)) + Delivery_Charges),2)
      ELSE ROUND((((Quantity * Avg_Price)*(1-(Discount_pct/100))*(1+tax.GST)) + Delivery_Charges),2)
  END
    AS invoice_value,
    discounts.coupon_code,
    tax.gst,
    customers.gender,
    customers.location
  FROM
    `turing-data-analytics-450718.ecommerce_data.Sales` AS sales
  LEFT JOIN
    `turing-data-analytics-450718.ecommerce_data.Tax_Info` AS tax
  ON
    sales.Product_Category = tax.Product_Category
  LEFT JOIN
    `turing-data-analytics-450718.ecommerce_data.Coupons` AS discounts
  ON
    FORMAT_DATE('%b', Transaction_Date) = discounts.Month
    AND sales.Product_Category = discounts.Product_Category
  JOIN
    `turing-data-analytics-450718.ecommerce_data.Customers` AS customers
  ON
    sales.CustomerID = customers.CustomerID ),
  -- Creating customers starting monthly cohorts using their first transaction month
  cohorts AS (
  SELECT
    DISTINCT(Customerid) AS unique_customers,
    main_data.gender AS gender,
    DATE_TRUNC(MIN(Transaction_date),MONTH) AS start_month,
  FROM
    main_data
  GROUP BY
    unique_customers,
    gender ),
  -- Creating customers transaction month
  transactions AS (
  SELECT
    customerid,
    main_data.gender AS gender,
    DATE_TRUNC(Transaction_date,MONTH) AS transaction_month
  FROM
    main_data
  ORDER BY
    customerid ),
  -- Joining the two CTE togerther for futher calculation
  joined_data AS (
  SELECT
    cohorts.unique_customers,
    cohorts.start_month,
    transactions.transaction_month,
    transactions.gender
  FROM
    cohorts
  LEFT JOIN
    transactions
  ON
    cohorts.unique_customers = transactions.customerid )
  -- Main query in which calculating each month customers gender to gain information about the retention in futher cohorts
SELECT
  joined_data.start_month AS cohorts_month,
  joined_data.gender AS gender,
  COUNT( DISTINCT joined_data.unique_customers) AS number_of_customers,
  COUNT (DISTINCT (CASE
        WHEN joined_data.transaction_month = joined_data.start_month THEN unique_customers
    END
      )) AS month_0,
  COUNT (DISTINCT (CASE
        WHEN joined_data.transaction_month = DATE_ADD (joined_data.start_month, INTERVAL 1 MONTH) THEN unique_customers
    END
      )) AS month1,
  COUNT (DISTINCT (CASE
        WHEN joined_data.transaction_month = DATE_ADD (joined_data.start_month, INTERVAL 2 MONTH) THEN unique_customers
    END
      )) AS month2,
  COUNT (DISTINCT (CASE
        WHEN joined_data.transaction_month = DATE_ADD (joined_data.start_month, INTERVAL 3 MONTH) THEN unique_customers
    END
      )) AS month3,
  COUNT (DISTINCT (CASE
        WHEN joined_data.transaction_month = DATE_ADD (joined_data.start_month, INTERVAL 4 MONTH) THEN unique_customers
    END
      )) AS month4,
  COUNT (DISTINCT (CASE
        WHEN joined_data.transaction_month = DATE_ADD (joined_data.start_month, INTERVAL 5 MONTH) THEN unique_customers
    END
      )) AS month5,
  COUNT (DISTINCT (CASE
        WHEN joined_data.transaction_month = DATE_ADD (joined_data.start_month, INTERVAL 6 MONTH) THEN unique_customers
    END
      )) AS month6,
  COUNT (DISTINCT (CASE
        WHEN joined_data.transaction_month = DATE_ADD (joined_data.start_month, INTERVAL 7 MONTH) THEN unique_customers
    END
      )) AS month7,
  COUNT (DISTINCT (CASE
        WHEN joined_data.transaction_month = DATE_ADD (joined_data.start_month, INTERVAL 8 MONTH) THEN unique_customers
    END
      )) AS month8,
  COUNT (DISTINCT (CASE
        WHEN joined_data.transaction_month = DATE_ADD (joined_data.start_month, INTERVAL 9 MONTH) THEN unique_customers
    END
      )) AS month9,
  COUNT (DISTINCT (CASE
        WHEN joined_data.transaction_month = DATE_ADD (joined_data.start_month, INTERVAL 10 MONTH) THEN unique_customers
    END
      )) AS month10,
  COUNT (DISTINCT (CASE
        WHEN joined_data.transaction_month = DATE_ADD (joined_data.start_month, INTERVAL 11 MONTH) THEN unique_customers
    END
      )) AS month11,
FROM
  joined_data
GROUP BY
  cohorts_month,
  gender
ORDER BY
  cohorts_month
